{"version":3,"file":"static/js/cast-page.35de71ff.chunk.js","mappings":"2PACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA4E,oBAA5E,EAAsG,kBAAtG,EAA+H,mBAA/H,EAAyJ,mBAAzJ,EAAwL,wBAAxL,EAAuN,mBAAvN,EAAkP,oB,6BCOnO,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA8BR,OA5BAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8FAEIH,EAAU,WAFd,SAIUI,EAAAA,GAA4BH,GAASI,MAAK,SAAAC,GAC9C,IAAMC,EAAUD,EAAKT,KAEE,IAAnBU,EAAQC,OACVR,EAAU,SAEVF,EAAQS,MAVhB,sDAcIE,QAAQC,IAAR,MAdJ,uBAgBIV,EAAU,YAhBd,2EADc,sBAqBVC,GArBW,WAAD,wBAsBZU,GAGFP,EAAAA,GAAyBH,GAASI,MAAK,SAAAC,GAAI,OAAIR,EAAQQ,EAAKT,WAC3D,CAACI,KAGF,gCACc,YAAXF,IAAwB,SAACa,EAAA,EAAD,IAEb,UAAXb,IACC,cAAGc,UAAWC,EAAd,gEAGU,aAAXf,GAAyBF,IACxB,+BACE,eAAIgB,UAAWC,EAAf,SACGjB,EAAKkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACR,gBAAaN,UAAWC,EAAxB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBACEM,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAKJ,EACLL,UAAWC,OAIf,iBAAKD,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAA4BI,KAC5B,eAAGL,UAAWC,EAAd,yBACa,iBAAMD,UAAWC,EAAjB,SAA+BK,YAhBvCH","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__oOD41\",\"item\":\"Cast_item__vxHbm\",\"thumb\":\"Cast_thumb__6KzW+\",\"img\":\"Cast_img__uVPra\",\"meta\":\"Cast_meta__xt576\",\"name\":\"Cast_name__y8nr9\",\"character\":\"Cast_character__esJL+\",\"text\":\"Cast_text__jl3u+\",\"error\":\"Cast_error__qFoZ6\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as moviesApi from '../../services/movies-api';\nimport styles from './Cast.module.css';\n\nimport Loader from 'components/Loader/Loader';\nimport noImage from '../../components/Img/no-image.png';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        setStatus('pending');\n\n        await moviesApi.fetchMovieReviews(movieId).then(data => {\n          const getCast = data.cast;\n\n          if (getCast.length === 0) {\n            setStatus('error');\n          } else {\n            setCast(getCast);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setStatus('resolved');\n      }\n    }\n\n    if (movieId) {\n      fetchMovieCast();\n    }\n\n    moviesApi.fetchMovieCast(movieId).then(data => setCast(data.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n\n      {status === 'error' && (\n        <p className={styles.error}>We don't have any cast for this movie ðŸ˜•</p>\n      )}\n\n      {status === 'resolved' && cast && (\n        <>\n          <ul className={styles.list}>\n            {cast.map(({ id, profile_path, original_name, character }) => (\n              <li key={id} className={styles.item}>\n                <div className={styles.thumb}>\n                  <img\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                        : noImage\n                    }\n                    alt={original_name}\n                    className={styles.img}\n                  />\n                </div>\n\n                <div className={styles.meta}>\n                  <p className={styles.name}>{original_name}</p>\n                  <p className={styles.character}>\n                    Character: <span className={styles.text}>{character}</span>\n                  </p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["Cast","useState","cast","setCast","status","setStatus","movieId","useParams","useEffect","moviesApi","then","data","getCast","length","console","log","fetchMovieCast","Loader","className","styles","map","id","profile_path","original_name","character","src","noImage","alt"],"sourceRoot":""}