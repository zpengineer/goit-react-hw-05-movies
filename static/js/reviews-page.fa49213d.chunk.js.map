{"version":3,"file":"static/js/reviews-page.fa49213d.chunk.js","mappings":"4PACA,EAAuB,sBAAvB,EAAoD,sBAApD,EAAmF,wBAAnF,EAAkH,sBAAlH,EAAkJ,yBAAlJ,EAAmL,uB,mBCMpK,SAASA,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA2BR,OAzBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8FAEIH,EAAU,WAFd,SAIUI,EAAAA,GAA4BH,GAASI,MAAK,SAAAC,GAC9C,IAAMC,EAAUD,EAAKE,QAEE,IAAnBD,EAAQE,OACVT,EAAU,UAEVF,EAAWS,GACXP,EAAU,gBAXlB,sDAeIU,QAAQC,IAAR,MAfJ,yDADc,sBAoBVV,GApBW,WAAD,wBAqBZW,KAED,CAACX,KAGF,gCACc,YAAXF,IAAwB,SAACc,EAAA,EAAD,IAEb,UAAXd,IACC,cAAGe,UAAWC,EAAd,mEAKU,aAAXhB,IACC,eAAIe,UAAWC,EAAf,SACGlB,EAAQmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,gBAAaL,UAAWC,EAAxB,WACE,eAAGD,UAAWC,EAAd,sBACU,iBAAMD,UAAWC,EAAjB,SAA+BG,QAEzC,cAAGJ,UAAWC,EAAd,SAA+BI,MAJxBF","sources":["webpack://goit-react-hw-05-movies/./src/pages/Reviews/Reviews.module.css?9a3e","pages/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__pCzae\",\"item\":\"Reviews_item__G1rz-\",\"author\":\"Reviews_author__Y70Lx\",\"text\":\"Reviews_text__fgYm-\",\"content\":\"Reviews_content__79P1X\",\"error\":\"Reviews_error__VdPe2\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as moviesApi from '../../services/movies-api';\nimport styles from './Reviews.module.css';\n\nimport Loader from 'components/Loader/Loader';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieReviews() {\n      try {\n        setStatus('pending');\n\n        await moviesApi.fetchMovieReviews(movieId).then(data => {\n          const getData = data.results;\n\n          if (getData.length === 0) {\n            setStatus('error');\n          } else {\n            setReviews(getData);\n            setStatus('resolved');\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    if (movieId) {\n      fetchMovieReviews();\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n\n      {status === 'error' && (\n        <p className={styles.error}>\n          We don't have any reviews for this movie ðŸ˜•\n        </p>\n      )}\n\n      {status === 'resolved' && (\n        <ul className={styles.list}>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id} className={styles.item}>\n              <p className={styles.author}>\n                Author: <span className={styles.text}>{author}</span>\n              </p>\n              <p className={styles.content}>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["Reviews","useState","reviews","setReviews","status","setStatus","movieId","useParams","useEffect","moviesApi","then","data","getData","results","length","console","log","fetchMovieReviews","Loader","className","styles","map","id","author","content"],"sourceRoot":""}